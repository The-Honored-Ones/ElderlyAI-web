// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum USERROLE {
    ADMIN
    ELDER
    GUARDIAN
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model User {
    id            String     @id @default(cuid())
    name          String?
    role          USERROLE   @default(ELDER)
    email         String?    @unique
    emailVerified DateTime?
    joinedAt      DateTime?  @default(now())
    image         String?
    accounts      Account[]
    guardian      Guardian[]
}

model Guardian {
    id        String   @id @default(cuid())
    userId    String
    elderId   String
    elder     User     @relation(fields: [elderId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

enum STATUS {
    COMPLETED
    REFUNDED
}

model Purchase {
    id          String   @id @default(cuid())
    orderNumber Int      @unique
    userId      String
    userName    String?
    userEmail   String?
    receipt     String
    price       String
    tax         String?
    variantId   Int
    variantName String
    status      STATUS   @default(COMPLETED)
    createdAt   DateTime @default(now())
}

model webhookEvent {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    eventName       String
    processed       Boolean  @default(false)
    body            Json
    processingError String?
}
